// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/models.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 8187999703906773452),
      name: 'Message',
      lastPropertyId: const obx_int.IdUid(7, 3527736696144607377),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1003110117452166693),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1192388491110896687),
            name: 'content',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 903732793977443783),
            name: 'timestamp',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 6136278220559597275),
            name: 'otherUserId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(5, 1915711445095790327),
            relationTarget: 'OtherUserEntity'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 3527736696144607377),
            name: 'isFromMe',
            type: 1,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 5724338621875103901),
      name: 'OtherUserEntity',
      lastPropertyId: const obx_int.IdUid(7, 5945036230008491017),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 6883466648741886162),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1474134683984528944),
            name: 'publicKey',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 5226730825950200721),
            name: 'chatEncryptionKey',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1293690579684862797),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 320350087460007259),
            name: 'uniqueId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 5945036230008491017),
            name: 'pathToImage',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 1916411115322574982),
      name: 'SelfUserEntity',
      lastPropertyId: const obx_int.IdUid(7, 933893555826692766),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3635407982183527746),
            name: 'id',
            type: 6,
            flags: 129),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 1495579614547240349),
            name: 'privateKey',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 1996077450670915037),
            name: 'publicKey',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 1260602398731655493),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 787478615307381340),
            name: 'uniqueId',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 933893555826692766),
            name: 'pathToImage',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(4, 6477876753457036233),
      lastIndexId: const obx_int.IdUid(5, 1915711445095790327),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [6477876753457036233],
      retiredIndexUids: const [
        8863063282642465184,
        7751898058956551536,
        7139292634974563498,
        6983944342967712945
      ],
      retiredPropertyUids: const [
        7170761976200550723,
        3699254129375644241,
        7284920529040335830,
        1011271634737175025,
        4445083271632496100,
        3981049419482940242,
        6985617820930020482,
        2254311068738113434
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    Message: obx_int.EntityDefinition<Message>(
        model: _entities[0],
        toOneRelations: (Message object) => [object.otherUser],
        toManyRelations: (Message object) => {},
        getId: (Message object) => object.id,
        setId: (Message object, int id) {
          object.id = id;
        },
        objectToFB: (Message object, fb.Builder fbb) {
          final contentOffset = fbb.writeString(object.content);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(2, contentOffset);
          fbb.addInt64(3, object.timestamp.millisecondsSinceEpoch);
          fbb.addInt64(5, object.otherUser.targetId);
          fbb.addBool(6, object.isFromMe);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final contentParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final timestampParam = DateTime.fromMillisecondsSinceEpoch(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0));
          final isFromMeParam =
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false);
          final object = Message(
              content: contentParam,
              timestamp: timestampParam,
              isFromMe: isFromMeParam)
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          object.otherUser.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
          object.otherUser.attach(store);
          return object;
        }),
    OtherUserEntity: obx_int.EntityDefinition<OtherUserEntity>(
        model: _entities[1],
        toOneRelations: (OtherUserEntity object) => [],
        toManyRelations: (OtherUserEntity object) => {},
        getId: (OtherUserEntity object) => object.id,
        setId: (OtherUserEntity object, int id) {
          object.id = id;
        },
        objectToFB: (OtherUserEntity object, fb.Builder fbb) {
          final publicKeyOffset = object.publicKey == null
              ? null
              : fbb.writeString(object.publicKey!);
          final chatEncryptionKeyOffset =
              fbb.writeString(object.chatEncryptionKey);
          final nameOffset = fbb.writeString(object.name);
          final uniqueIdOffset = fbb.writeString(object.uniqueId);
          final pathToImageOffset = object.pathToImage == null
              ? null
              : fbb.writeString(object.pathToImage!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(2, publicKeyOffset);
          fbb.addOffset(3, chatEncryptionKeyOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, uniqueIdOffset);
          fbb.addOffset(6, pathToImageOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final uniqueIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final pathToImageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final publicKeyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final chatEncryptionKeyParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, '');
          final object = OtherUserEntity(
              id: idParam,
              name: nameParam,
              uniqueId: uniqueIdParam,
              pathToImage: pathToImageParam,
              publicKey: publicKeyParam,
              chatEncryptionKey: chatEncryptionKeyParam);

          return object;
        }),
    SelfUserEntity: obx_int.EntityDefinition<SelfUserEntity>(
        model: _entities[2],
        toOneRelations: (SelfUserEntity object) => [],
        toManyRelations: (SelfUserEntity object) => {},
        getId: (SelfUserEntity object) => object.id,
        setId: (SelfUserEntity object, int id) {
          object.id = id;
        },
        objectToFB: (SelfUserEntity object, fb.Builder fbb) {
          final privateKeyOffset = fbb.writeString(object.privateKey);
          final publicKeyOffset = fbb.writeString(object.publicKey);
          final nameOffset = fbb.writeString(object.name);
          final uniqueIdOffset = fbb.writeString(object.uniqueId);
          final pathToImageOffset = object.pathToImage == null
              ? null
              : fbb.writeString(object.pathToImage!);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(2, privateKeyOffset);
          fbb.addOffset(3, publicKeyOffset);
          fbb.addOffset(4, nameOffset);
          fbb.addOffset(5, uniqueIdOffset);
          fbb.addOffset(6, pathToImageOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 12, '');
          final uniqueIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 14, '');
          final pathToImageParam =
              const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 16);
          final privateKeyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final publicKeyParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 10, '');
          final object = SelfUserEntity(
              id: idParam,
              name: nameParam,
              uniqueId: uniqueIdParam,
              pathToImage: pathToImageParam,
              privateKey: privateKeyParam,
              publicKey: publicKeyParam);

          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Message] entity fields to define ObjectBox queries.
class Message_ {
  /// See [Message.id].
  static final id =
      obx.QueryIntegerProperty<Message>(_entities[0].properties[0]);

  /// See [Message.content].
  static final content =
      obx.QueryStringProperty<Message>(_entities[0].properties[1]);

  /// See [Message.timestamp].
  static final timestamp =
      obx.QueryDateProperty<Message>(_entities[0].properties[2]);

  /// See [Message.otherUser].
  static final otherUser = obx.QueryRelationToOne<Message, OtherUserEntity>(
      _entities[0].properties[3]);

  /// See [Message.isFromMe].
  static final isFromMe =
      obx.QueryBooleanProperty<Message>(_entities[0].properties[4]);
}

/// [OtherUserEntity] entity fields to define ObjectBox queries.
class OtherUserEntity_ {
  /// See [OtherUserEntity.id].
  static final id =
      obx.QueryIntegerProperty<OtherUserEntity>(_entities[1].properties[0]);

  /// See [OtherUserEntity.publicKey].
  static final publicKey =
      obx.QueryStringProperty<OtherUserEntity>(_entities[1].properties[1]);

  /// See [OtherUserEntity.chatEncryptionKey].
  static final chatEncryptionKey =
      obx.QueryStringProperty<OtherUserEntity>(_entities[1].properties[2]);

  /// See [OtherUserEntity.name].
  static final name =
      obx.QueryStringProperty<OtherUserEntity>(_entities[1].properties[3]);

  /// See [OtherUserEntity.uniqueId].
  static final uniqueId =
      obx.QueryStringProperty<OtherUserEntity>(_entities[1].properties[4]);

  /// See [OtherUserEntity.pathToImage].
  static final pathToImage =
      obx.QueryStringProperty<OtherUserEntity>(_entities[1].properties[5]);
}

/// [SelfUserEntity] entity fields to define ObjectBox queries.
class SelfUserEntity_ {
  /// See [SelfUserEntity.id].
  static final id =
      obx.QueryIntegerProperty<SelfUserEntity>(_entities[2].properties[0]);

  /// See [SelfUserEntity.privateKey].
  static final privateKey =
      obx.QueryStringProperty<SelfUserEntity>(_entities[2].properties[1]);

  /// See [SelfUserEntity.publicKey].
  static final publicKey =
      obx.QueryStringProperty<SelfUserEntity>(_entities[2].properties[2]);

  /// See [SelfUserEntity.name].
  static final name =
      obx.QueryStringProperty<SelfUserEntity>(_entities[2].properties[3]);

  /// See [SelfUserEntity.uniqueId].
  static final uniqueId =
      obx.QueryStringProperty<SelfUserEntity>(_entities[2].properties[4]);

  /// See [SelfUserEntity.pathToImage].
  static final pathToImage =
      obx.QueryStringProperty<SelfUserEntity>(_entities[2].properties[5]);
}
